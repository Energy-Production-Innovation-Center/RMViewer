# Gitlab Continuous Integration / Delivery / Deployment configuration.
# Ref: https://docs.gitlab.com/ee/ci/

default:
  tags: [linux]
  before_script:
    - apk --no-cache add bash coreutils curl jq go-task
  interruptible: true

variables:
  OUT_DIR: "out"
  REPORT_DIR: "$OUT_DIR/report"
  BUILD_DIR: "$OUT_DIR/bin"
  DIST_DIR: "$OUT_DIR/dist"

stages:
  - verify
  - test
  - analyze
  - build
  - release

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

include:
  - template: Jobs/SAST.latest.gitlab-ci.yml
  - template: Jobs/SAST-IaC.latest.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml

kics-iac-sast:
  stage: analyze
  before_script: []

secret_detection:
  stage: analyze
  before_script: []

semgrep-sast:
  stage: analyze
  before_script: []

.base_ruff:
  stage: verify
  image:
    name: ghcr.io/astral-sh/ruff:alpine
  before_script:
    - cd $CI_PROJECT_DIR

format:
  extends: .base_ruff
  timeout: 5m
  script:
    - ruff format --diff

lint:
  extends: .base_ruff
  timeout: 15m
  script:
    - ruff check || true
    - ruff check --output-format=gitlab > code-quality-report.json
  artifacts:
    reports:
      codequality: $CI_PROJECT_DIR/code-quality-report.json

type:
  stage: verify
  timeout: 20m
  resource_group: docker-rmviewer
  script:
    - go-task type:check

.build:
  stage: build
  timeout: 1h
  resource_group: docker-rmviewer
  artifacts:
    paths: [$BUILD_DIR]

.build:linux:
  extends: [.build]
  script:
    - go-task build:linux

.build:windows:
  extends: [.build]
  script:
    - go-task build:windows

.dev:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  artifacts:
    expire_in: 8 hours
  environment:
    name: development
    deployment_tier: development

.test:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  artifacts:
    expire_in: 3 days
  environment:
    name: testing
    deployment_tier: testing

.stag:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    expire_in: 2 months
  environment:
    name: staging
    deployment_tier: staging

.prod:
  rules:
    - if: $CI_COMMIT_TAG
  artifacts:
    expire_in: never
  environment:
    name: production
    deployment_tier: production

build:dev:linux:
  extends: [.dev, .build:linux]

build:dev:windows:
  extends: [.dev, .build:windows]

build:test:linux:
  extends: [.test, .build:linux]

build:test:windows:
  extends: [.test, .build:windows]

build:stag:linux:
  extends: [.stag, .build:linux]

build:stag:windows:
  extends: [.stag, .build:windows]

.dist:
  extends: [.prod]
  stage: build
  timeout: 1h
  resource_group: docker-rmviewer
  artifacts:
    paths: [$DIST_DIR]
    reports:
      dotenv: job.env

dist:linux:
  extends: [.dist]
  script:
    - go-task APP_VERSION=$CI_COMMIT_TAG dist:linux
  after_script:
    - echo "DIST_LINUX_JOB_ID=$CI_JOB_ID" >> job.env

dist:windows:
  extends: [.dist]
  script:
    - go-task APP_VERSION=$CI_COMMIT_TAG dist:windows
  after_script:
    - echo "DIST_WINDOWS_JOB_ID=$CI_JOB_ID" >> job.env

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  timeout: 10m
  rules:
    - if: $CI_COMMIT_TAG
  release:
    tag_name: $CI_COMMIT_TAG
    description: $CI_COMMIT_TAG_MESSAGE
    ref: $CI_COMMIT_SHA
    assets:
      links:
        - name: "Linux installer (.deb)"
          url: "$CI_PROJECT_URL/-/jobs/$DIST_LINUX_JOB_ID/artifacts/raw/$DIST_DIR/rmviewer-$CI_COMMIT_TAG-1.x86_64.deb"
          link_type: package
        - name: "Linux installer (.rpm)"
          url: "$CI_PROJECT_URL/-/jobs/$DIST_LINUX_JOB_ID/artifacts/raw/$DIST_DIR/rmviewer-$CI_COMMIT_TAG-1.x86_64.rpm"
          link_type: package
        - name: "Linux binaries (.tar.gz)"
          url: "$CI_PROJECT_URL/-/jobs/$DIST_LINUX_JOB_ID/artifacts/raw/$DIST_DIR/rmviewer-$CI_COMMIT_TAG-linux.tar.gz"
          link_type: other
        - name: "Windows installer (.exe)"
          url: "$CI_PROJECT_URL/-/jobs/$DIST_WINDOWS_JOB_ID/artifacts/raw/$DIST_DIR/rmviewer-$CI_COMMIT_TAG-installer.exe"
          link_type: package
        - name: "Windows binaries (.zip)"
          url: "$CI_PROJECT_URL/-/jobs/$DIST_WINDOWS_JOB_ID/artifacts/raw/$DIST_DIR/rmviewer-$CI_COMMIT_TAG-windows.zip"
          link_type: other
  before_script: []
  script:
    - echo "running release job"
